Introduction to Computer Programming with Python and Pygame
===========================================================
Ed Harcourt <edharcourt@stlawu.edu>
v0.1, May 2017:
:toc: right
:icons: font

[preface]
Preface
-------

I have been teaching the Introduction to Computer Programming course at St. Lawrence Univeristy for many years. The course at St. Lawrence is designed to satisfy a general education requirement called _quantitaive and logical reasoning_. As such, students from across campus in a variety of majors take this course. 

One goal of the course is for students to understand the complexity of of the software systems that they encounter every day. Most of them will not go on to be professional software developers but the emphasis on problem solving using a computer programming language often works their brain in a way they have never before seen.

== Introduction

Software is developed and written in a _programming language_. There are, literally, thousands of programming languages, mostly dead now, but there are many hundreds still in active use. About a dozen or so dominate the modern software development landscape. For exameple the Javascript programming language (not to be confised with the Java programming language) is in every web browser. Most computer games are written in C or C++. Native iPhone apps are wrriten in Objective-C or Swift, while Android aps use Java. 

The Python programming language is one language that is in common use and popular to use in an introductory course because it is easy to use and easy to get started with.  So lets get started.

It is almost obligatory that _Hello World_ be the first program one write's in any programming language. Here is our first python program:

[source,python]
print("Hello world")

That is it, just the one line. And it does as you might expect, it prints the message `Hello World` on the console. But there is a lot going on in that one line, so lets break it down. 

The python _builtin function_ `print` prints, to the console, the value between the parentheses. In this case the value being printed is the _string literal_ `"Hello World"`.  A string literal in python is a sequence of characters between double quotes or single quotes. More on string literals later.

The print statement can take multiple values to print.

[source,python]
print("The value of pi squared is", 3.14159 * 3.14159)

produces the output 

[source]
The value of pi squared is 9.869587728099999

Values that are passed to a function are called _arguments_. The second argument in the call to the `print` function above is the mathematical expression `3.14159 * 3.14159`. In just about every programming lananguage the asterisk character `*` represents multiplication. A value such as `3.14159` in mathematics is called a _real number_ (a number with a decimal point). For reasons I wont go into now in computer science and programming we call them _floating-point_ numbers, or _floats_ for short.

There is a big difference between the string literal `"3.0`" and the floating-point literal `3.0`. To see this what would get printed by the following print statement?

[source,python]
print("3.0 * 3.0", 3.0 * 3.0)

Numbers without decimal points are called _integers_ or _ints_ for short. 

=== Integer and floating-point literals

Valid _integer literals_ include numbers such as 0, 1, 2, ... and also negative ineter -1, -2, ...

IMPORTANT: don't start integer literals with a leading 0, such as 09. This is an error in Python.

Floating-point literals include a decimal place, and include numbers such as 0.3, -0.3, .3, 3., -3.14159.


=== Variables

Let's return to 

=== Mathematical Expressions

=== More on String Literals

Strings are an important part of programming. They may seem boring but applications such web searching, texting, email, DNA sequence analysis and cryptography all involve sequences of characters.

A string literal is a sequence of characters between double quotes. 

[source,python]
"This is a valid string literal"

Or single quotes.

[source,python]
'and so is this'

IMPORTANT: the starting and ending quotes must match

[source,python]
"but this string literal has an error, why?'

[source,python]
'and so does this, why?"

But what if you want to include a single quote in your string literal? Here is one way to do it.

[source,python]
"This isn't an error"

This worksbecuase the outer double quotes demarcate the string literal and the single quote in `don't` is just a single quote character because it is inside the double quotes.

The following is incorrect.

[source,python]
'It isn't easy to see that this is an error, why?'

The second single quote in `isn't` doesn't know that it is part of the contraction but thinks it is the closing quote of the string literal.

What would get printed by the following print statement?

[source,python]
print('He said "Do it!"') 

Things can get pretty crazy. How about if we wanted to print the string _He said "Don't do it!"_.  The issue here is that the string we are printing contains a mix of double and single quotes. The trick is that we need to escape one of the quote characters. For example, if we need a single quote to be the single quote character and not the start or end of a string we can put a backslash character in front of it. 

The statement

[source,python]
print('He said "don\'t"') 

produces the output 

[source]
He said "don't"

=== A note about spaces

Pygame Intro
------------

Functions
---------

Repetition - The While Loop
---------------------------

[source,python]
while (condition):
    stmt

More Loop Exercises
~~~~~~~~~~~~~~~~~~~

1+2+3+...

Yet More Loop Exercises
~~~~~~~~~~~~~~~~~~~~~~~

some more loopity loop