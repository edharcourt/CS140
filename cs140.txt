Introduction to Computer Programming with Python and Pygame
===========================================================
Ed Harcourt <edharcourt@stlawu.edu>
v0.1, May 2017:
:toc: right
:icons: font
:source-highlighter: pygments
:stem:

[preface]
Preface
-------

I have been teaching the Introduction to Computer Programming course at St. Lawrence Univeristy for many years. The course at St. Lawrence is designed to satisfy a general education requirement called _quantitaive and logical reasoning_. As such, students from across campus in a variety of majors take this course. 

Goals of the course include:

* Appreciate the complexity of the software systems we encounter every day
* Emphasize problem soving in a precise, logical framework 
* Explore a multitude of topics in computer science such as; image processing, simulation and randomness, cryptography, network communications, [and more] 

== Introduction


Software is developed and written in a _programming language_. There are, literally, thousands of programming languages, mostly dead now, but there are many hundreds still in active use. About a dozen or so dominate the modern software development landscape. For example the Javascript programming language (not to be confised with the Java programming language) is in every web browser. Most computer games are written in C or C++. Native iPhone apps are wrriten in Objective-C or Swift, while Android aps use Java. 

The Python programming language is one language that is in common use and popular to use in an introductory course because it is easy to use and easy to get started with.  So lets get started.

It is almost obligatory that https://en.wikipedia.org/wiki/%22Hello,_World!%22_program[ Hello World] be the first program one write's in any programming language. Here is our first python program:

[source,python]
print("Hello world")

////
.This will have a link next to it
----
* always displayed
* always displayed 2
----

[.result]
====
* hidden till clicked
* hidden till clicked 2
====
////

That is it, just the one line. And it does as you might expect, it prints the message `Hello World` on the console. But there is a lot going on in that one line, so lets break it down. 

The python _builtin function_ `print` prints, to the console, the value between the parentheses. In this case the value being printed is the _string literal_ `"Hello World"`.  A string literal in python is a sequence of characters between double quotes or single quotes. More on string literals later.

The print function can take multiple values.

[source,python]
print("The value of pi squared is", 3.14159 * 3.14159)

produces the output 

[source]
The value of pi squared is 9.869587728099999

Values that are passed to a function are called _arguments_. The second argument in the call to the `print` function above is the mathematical expression `3.14159 * 3.14159`. In just about every programming lananguage the asterisk character `*` represents multiplication. A value such as `3.14159` in mathematics is called a _real number_ (a number with a decimal point). For reasons I wont go into now in computer science and programming we call them _floating-point_ numbers, or _floats_ for short.

There is a big difference between the string literal `"3.0`" and the floating-point literal `3.0`. To see this what would get printed by the following print statement?

[source,python]
print("3.0 * 3.0", 3.0 * 3.0)

Numbers without decimal points are called _integers_ or _ints_ for short. 

=== Integer and floating-point literals

Valid _integer literals_ include numbers such as 0, 1, 2, ... and also negative integers -1, -2, ...

IMPORTANT: don't start integer literals with a leading 0, such as 09. This is an error in Python.

Floating-point literals include a decimal place, and include numbers such as 0.3, -0.3, .3, 3., -3.14159.

=== Variables

Let's return to our simple python program ...

[source,python]
print("The value of pi squared is", 3.14159 * 3.14159)

It would be nice to give the value `3.14159` a name. An obvious choice being `pi`.  We do that in Pythonusing an _assignment statement_.

[source,python]
pi = 3.14159

And we can rewrite our program as 

[source,python]
pi = 3.14159
print("The value of pi squared is", pi * pi)

To the left of the `=` sign is a _variable name_ and we read the assignment statement above as `pi` _gets the value of_ the value on the right of `=`, in this case `3.14159`.

Variable names in Python are should be meaningful, they must start with either an alphabetic character (a - z, A - Z) or underscore, and may also contain digits. Variable names are also _case sensitive_, so `pi`, `Pi`, and `PI` are all different variable names.

The value of on the of `=` can also be an _expression_.

IMPORTANT: Students often confuse `=` with mathematical equality and think `3.14159 = pi` is the same thing as `pi = 3.14159`. This is not valid in Python.

[source,python]
pi = 3.14159
pi_squared = pi * pi
print("The value of pi squared is", pi_squared)

IMPORTANT: Variables mst be defined before they are used.

The Python program 

[source,python]
print(x)

would produce an error becuse the variable `x` does not have a value.

IMPORTANT: Variable names are not string literals.

.There is a big difference between the two statements...
[source,python]
----
print("The value of pi squared is", pi_squared) # <1>
print("The value of pi squared is", "pi_squared") # <2>
----

[.result]
<1> prints `The value of pi squared is 9.869587728099999`
<2> prints `The value of pi squared is pi_squared` +
Almost certainly not what was intended.

=== Mathematical Expressions

The arithmetic operators we will be using most are:

[cols="1,8", width="50%", options="header"]
.Mathematical Operators
|===
|Operator | operation
|`+`
|addition
|`-`
|subtraction
|`*`
|multiplication
|`/`
|floating-point division
|`//`
|integer division
|`%`
|remainder (modulus)
|`**`
|exponentiation
|===

Python has many more operators, but this is all we will need for now.  You can combine these operations in complicated ways including using parentheses. The _normal 
order of operations_ you learned in grade school apply.

. parentheses
. exponention
. multiplication, division (include remainder)
. addition and subtraction

==== Examples

What is the output of each of the examples below?

.Example 1
[source,python]
----
x = 3 + 5 * 9
print(x)
----

[.result]
====
`48`
====

.Example 2
[source,python]
----
x = 1/2 <1>
print(x)
----

[.result]
====
`0.5`
====
<1> Recall that the single slash is _floating-point division_ meaning the result is 
a floating-point number.

Contrast this with _integer division_ using the double slash operator `//`. 
In integer division the result is always an integer.

.Example 3
[source,python]
----
w = 1 // 2
x = 3 // 7
y = 3 // 2
z = 77 // 5
print(w,x,y,z)
----

[.result]
====
`0 0 1 15`
====
 
Integer division will play an a key role in many applications throughout these notes.

.Example 4
[source,python]
----
x = 7
y = 9
z = x + y // 4 * x - 2 ** 3
print(z)
----

[.result]
====
`13`
====

Expressions always produce a value,and something must be done with that value such as assign it to a variable or print it.  Consider the following Python program.

[source,python]
----
two_pi = 3.14159 * 2 <1>
two_pi * two_pi <2>
print(two_pi) <3>
----
<1> compute 2&pi; and store the result in the variable `two_pi`
<2> multiply `two_pi` times `two_pi` _and do nothing with the result_ so Python just throws the value away. *This line is pointless*, it has no effect, but it is legal.
<3> print `two_pi`

=== More on String Literals

Strings are an important part of programming. They may seem boring but applications such web searching, texting, email, DNA sequence analysis and cryptography all involve sequences of characters.

A string literal is a sequence of characters between double quotes. 

[source,python]
"This is a valid string literal"

Or single quotes.

[source,python]
'and so is this'

IMPORTANT: the opening and closing quotes in a string literal must match

[source,python]
"but this string literal has an error, why?'

[source,python]
'and so does this, why?"

But what if we want to include a single quote as one of the characters in our string literal? One way to do it is to use double quotes for the string literal.

[source,python]
"This isn't an error"

This works becuase the outer double quotes demarcate the string literal and the single quote in `don't` is just a single quote character because it is inside the double quotes.

The following is incorrect.

[source]
'It isn't easy to see that this is an error, why?'

Python can't tell that the second single quote in `isn't` is part of the word but recognizes it as the closing quote matching the open quote.

.What would get printed by the following print statement?
[source,python]
----
print('He said "Do it!"') 
----

[.result]
====
`He said "Do it!"`
====

Things can get pretty crazy. How about if we wanted to print the string _He said "Don't do it!"_.  The issue here is that the string we are printing contains a mix of double and single quotes. The trick is that we need to _escape_ one of the quote characters. For example, if we need a single quote to be the single quote character and not the start or end of a string literal we can put a backslash character in front of it. 

The statement

[source,python]
print('He said "don\'t"') 

produces the output 

[source]
He said "don't"


=== A note about spaces

Spaces, like in writing, are used to separate words in Python, and are often used to make code more readable. For example, in a `print` statement you can put a space after the comma that is separating values to print.

[source,python]
print(a, b, c, d) 

which might look slightly less cramped than
 
[source,python]
print(a,b,c,d) 

Spaces can also make code less readable,

[source,python]
print(a      ,           b,c,                       d) 

is also valid -- but ugly.

WARNING: Spacing at the start of a line that changes indentation can cause problems. See the next section.

=== A note about indentation

We will see later on that indentation plays an important role in Python. For now you should just note that all python statements that are _at the same level_ (and we wont really know what that means until we get to more complicated Python) should be indented exactly the same. 

Here is an example. The following program is in error because the second statement is indented one space.

[source,python]
x = 4
 print(x*x)

TIP: Python is unique in the way that it treats indentation. Most other programming languages are not sensitive to the way that indentation is handled.

=== Syntax Errors

We've already encountered ways in which we can violate the rules of the language. In computer programming we call these _syntax errors_. Find the error in each of the following:

.Example 1
----
print("Hello)
----

[.result]
====
Missing double quote closing the string lteral `"Hello"`.
====

.Example 2
----
print("Hello')
----

[.result]
====
Mismatched quotes.
====

.Example 3
----
print("Hello"
----

[.result]
====
Missing closing parentheses.
====

.Example 4
----
print("Hello" 77)
----

[.result]
====
Missing comma between `Hello` and `77`.
====

.Example 5
----
print(x)
----

[.result]
====
Variable `x` is not defined.
====

.Example 6
----
 x = 5
print(x)
----

[.result]
====
Indentation error
====

.Example 7
----
x = 5 9
print(x)
----

[.result]
====
Python expects there to be something _between_ the `5` and the `9` such as a mathematical operator `+` or `*`.
====

Some syntax errors are just nasty and difficult to find. The following one line program looks non-sensical but shows a common mistake of leaving off the parentheses when calling a function. But the program actually runs.

.Example 8
----
print
----

[.result]
====
<built-in function print>
====

As you gain practice you will be able to quickly find syntax errors.

=== Keyboard Input

Python's `input` function allows the user to enter input from the keyboard. It takes a string as an argument and uses it as a prompt. The `input` function is a different kind of function than the `print` function. The `print` puts values on the Python console window whereas the `input` function produces a string value of the characters that the user typed.

[source,python]
name = input('Enter your name: ')
print("Hello", name)

 Enter your name: Hermione <1>
 Hello Hermione
 
<1> `Hermione` is what the user typed and then hit _enter_ on the keyboard.
 
It is common to have users enter numbers and then use the values in mathematical expressions. The formula to convert a temperature in fahrenheit to celsius is 
latexmath:[5/9(f-32)]

[source,python]
f = input('Enter a temperature (F): ')
c = 5/9*(f - 32)
print(f, "fahrenheit is", c, "celsius")

Unfortunately `f` contains a string, not a number, and `(f - 32)` has an error because you can't subtract 32 from a string. You need to first convert `f` to either 
an integer or a floating-point number using either the `int` or `float` function.

WARNING: The `input` function returns a string value, even if the user entered a number. You must convert the string to a number using the `int` or `float` function if you intend to use the input in a mathematical expression.

[source,python]
f = float(input('Enter a temperature (F): ')) <1>
c = 5/9*(f - 32)
print(f, "degrees fahrenheit is", c, "degrees celsius")

<1> Notice the use of the function `float` to convert the string to a floating-point number. 

Here is a sample run of the Fahrenheit to Celsius conversion program.

 Enter a temperature (F): 83.5 <1>
 83.5 degrees fahrenheit is 28.61111111111111 degrees celsius

<1> The user entered `83.5`

Notice the rather unhelpful number of digits in the result `28.61111111111111`. It looks rediculous. Python has a builtin function `round` that rounds a floating-point number to a certain number of decimal places. For example, `round(3.157, 2)` will round `3.157` to two decimal places, producing the value `3.16`. Using this in our temperature conversion program:

[source,python]
f = float(input('Enter a temperature (F): '))
c = 5/9*(f - 32)
print(f, "degrees fahrenheit is", round(c,1), "degrees celsius") <1>

<1> Notice the use of the function `round` to round th value `c` to one decimal places.

Here is a sample run of the Fahrenheit to Celsius conversion program.

 Enter a temperature (F): 83.5
 83.5 degrees fahrenheit is 28.6 degrees celsius

=== The `math` module
 
=== Exercises

. C2F

. Windchill

. Area of circle

. volume of a cone

. population example

. compound interest

. change making 

. Distance of a point (x,y) from the origin

. Distance between two points (x~1~,y~1~) and (x~2~,y~2~) 


== Pygame Intro

== Functions

=== Calling Functions

=== Defining Functions



== Repetition - The While Loop

[source,python]
while (condition):
    stmt

More Loop Exercises
~~~~~~~~~~~~~~~~~~~

1+2+3+...

Yet More Loop Exercises
~~~~~~~~~~~~~~~~~~~~~~~

some more loopity loop